import { Component, OnInit, OnDestroy, ChangeDetectorRef, ViewChild, ElementRef, HostListener } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router, RouterModule } from '@angular/router';
import { AuthService, User } from '../../services/auth.service';
import { Subscription } from 'rxjs';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.css']
})
export class HeaderComponent implements OnInit, OnDestroy {
  @ViewChild('userMenu') userMenuElement!: ElementRef;
  
  isMobileMenuOpen = false;
  isUserMenuOpen = false;
  isAuthenticated = false;
  currentUser: User | null = null;
  userInitials = '??';
  
  private authSubscription: Subscription | null = null;
  
  constructor(
    private authService: AuthService,
    private cdr: ChangeDetectorRef,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.authSubscription = this.authService.currentUser$.subscribe(user => {
      this.currentUser = user;
      this.isAuthenticated = !!user;
      this.updateUserInitials();
      this.cdr.detectChanges();
    });
    
    // Cerrar menú al hacer clic fuera de él
    document.addEventListener('click', this.onDocumentClick);
  }
  
  ngOnDestroy(): void {
    if (this.authSubscription) {
      this.authSubscription.unsubscribe();
    }
    document.removeEventListener('click', this.onDocumentClick);
  }
  
  private onDocumentClick = (event: MouseEvent): void => {
    if (this.userMenuElement && !this.userMenuElement.nativeElement.contains(event.target)) {
      this.isUserMenuOpen = false;
    }
  }
  
  toggleMobileMenu(): void {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
  }
  
  toggleUserMenu(event: Event): void {
    event.stopPropagation();
    this.isUserMenuOpen = !this.isUserMenuOpen;
  }
  
  logout(): void {
    this.authService.logout();
    this.isUserMenuOpen = false;
    this.router.navigate(['/']);
  }
  
  private updateUserInitials(): void {
    if (!this.currentUser) {
      this.userInitials = '??';
      return;
    }
    
    const name = this.currentUser.nombre_usuario || '';
    const parts = name.split(' ');
    
    if (parts.length >= 2) {
      this.userInitials = `${parts[0][0]}${parts[1][0]}`.toUpperCase();
    } else if (name.length > 0) {
      this.userInitials = name[0].toUpperCase();
    } else if (this.currentUser.email) {
      this.userInitials = this.currentUser.email[0].toUpperCase();
    } else {
      this.userInitials = '??';
    }
  }
}
